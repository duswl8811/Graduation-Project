// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CLIENTID_H_
#define FLATBUFFERS_GENERATED_CLIENTID_H_

#include "flatbuffers/flatbuffers.h"

struct Client_Id_Packet;

struct Client_Id_Packet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct Client_Id_PacketBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(Client_Id_Packet::VT_ID, id, 0);
  }
  explicit Client_Id_PacketBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Client_Id_PacketBuilder &operator=(const Client_Id_PacketBuilder &);
  flatbuffers::Offset<Client_Id_Packet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Client_Id_Packet>(end);
    return o;
  }
};

inline flatbuffers::Offset<Client_Id_Packet> CreateClient_Id_Packet(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0) {
  Client_Id_PacketBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_CLIENTID_H_
